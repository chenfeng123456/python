# Longest Palindromic Subsequence
## Description:
```
 Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.
```
### Example 1:
```
Input:

"bbbab"

Output:

4

One possible longest palindromic subsequence is "bbbb".
```
### Example 2:
```
Input:

"cbbd"

Output:

2

One possible longest palindromic subsequence is "bb". 
```
```cpp
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        vector<vector<int>> dp(s.length(),vector<int>(s.length(),0));
        for(int i=s.length()-1;i>=0;i--)
        {
            dp[i][i]=1;
            for(int j=i+1;j<s.length();j++)
            {
                if(s[i]==s[j]) 
                {
                    dp[i][j]=dp[i+1][j-1]+2;
                }
                else 
                {
                    dp[i][j]=max(dp[i][j-1],dp[i+1][j]);
                }
            }
        }
        return dp[0][s.length()-1];
    }
};
```
这道题跟之前的[Palindromic Substrings](https://github.com/chenfeng123456/leetcode/blob/note1/palindromic_substrings.mkd)有些相像。我们可以得到递推关系：

1. 若s[i]==s[j]则dp[i][j]=dp[i+1][j-1]+2;
2. 若不等，dp[i][j]被赋值为其s[i]\~s[j]中最长子序列的长度，即dp[i][j-1]和dp[i+1][j]中的较大者。

**需注意的一点是，i要从最大下标处开始，j要从i+1处开始，否则递推无法进行。**