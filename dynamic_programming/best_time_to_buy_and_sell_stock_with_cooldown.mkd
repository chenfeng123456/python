#Best Time to Buy and Sell Stock with Cooldown
##Description:
```
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:
```
   - You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
   - After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)

###Example:
```
prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]
```
```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len=prices.size();
        if(len<=1) return 0;
        vector<int> buy(len),sell(len);
        sell[0]=0;
        buy[0]=-prices[0];
        sell[1]=max(sell[0],buy[0]+prices[1]);
        buy[1]=max(buy[0],-prices[1]);
        int i;
        for(i=2;i<len;i++)
        {
            sell[i]=max(buy[i-1]+prices[i],sell[i-1]);
            buy[i]=max(sell[i-2]-prices[i],buy[i-1]);
        }
        return sell[i-1];
    }
};
```
***************************************
这道题顺着	
Best Time to Buy and Sell Stock with Transaction Fee的思路写的，只是如果前一天卖了今天就不能买，相应地将代码改一下即可。