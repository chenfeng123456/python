# Maximum Length of Pair Chain
## Description:
```
 You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.
```
### Example 1:
```
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
```
### Note:
   
   - The number of given pairs will be in the range [1, 1000].

#### my code(*Accepted*)
```
class Solution {
public:
    static bool comp(vector<int>& a,vector<int>& b)
    {
        return a[1]<b[1];
    }
    
    int findLongestChain(vector<vector<int>>& pairs) {
        if(pairs.size()==0) return 0;
        sort(pairs.begin(),pairs.end(),comp);
        vector<int> dp(pairs.size(),1);
        int res=1;
        for(int i=1;i<pairs.size();i++)
        {
            for(int j=i-1;j>=0;j--)
            {
                if(pairs[j][1]<pairs[i][0]) dp[i]=max(dp[i],dp[j]+1);
            }
            res=max(res,dp[i]);
        }
        return res;
    }
};
```
#### nice code(*Accepted*)
```
class Solution {
public:
    static bool comp(vector<int>& a,vector<int>& b)
    {
        return a[1]<b[1];
    }
    
    int findLongestChain(vector<vector<int>>& pairs) {
        if(pairs.size()==0) return 0;
        sort(pairs.begin(),pairs.end(),comp);
        vector<int> dp(pairs.size(),1);
        int res=0,last=INT_MIN;
        for(int i=0;i<pairs.size();i++)
        {
            if(pairs[i][0]>last) 
            {
                res++;
                last=pairs[i][1];
            }
        }
        return res;
    }
};
```
***********************************
这道题一开始顺着之前[Longest Increasing Subsequence](https://github.com/chenfeng123456/leetcode/blob/Dynamic-Programming/longest_increasing_subsequence.mkd#for-example)的思路做，结果也成功了。看了以下distribution，发现只有是百分之三十多，于是瞄了一眼效率最高的代码，发现仅仅是稍微改了一点，复杂度就大大减小了。

这题我们先对数组按照每行第二个元素的升序进行排列。然后比较当前行的第一个元素与链对的最后一行的第二个元素的大小，若大于，则长度加一。

这题与上一题不同的地方是这一题可以排序。而链对的第一个元素一定是第二列元素中的最小者所在的那一行。也就是说，这一题的中序列的首元素可以说是确定的，而Maximum Length of Pair Chain则不是。
