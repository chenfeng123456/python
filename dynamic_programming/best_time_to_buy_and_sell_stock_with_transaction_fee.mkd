#Best Time to Buy and Sell Stock with Transaction Fee
##Description:
```
Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.
```
###Example 1:
```
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
```
###Note:
- 0 < prices.length <= 50000.
- 0 < prices[i] < 50000.
- 0 <= fee < 50000.

```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        if(prices.size()<=1) return 0;
        vector<int> sell(prices.size()),buy(prices.size());
        sell[0]=0;
        buy[0]=-prices[0];
        int i;
        for(i=1;i<prices.size();i++)
        {
            sell[i]=max(sell[i-1],buy[i-1]+prices[i]-fee);
            buy[i]=max(buy[i-1],sell[i-1]-prices[i]);
        }
        return sell[i-1];
    }
};
```
这里buy[i]表示第i天买收益最大，sell[i]表示第i天卖收益最大。第i+1天相对于前一天有三种状态：买、卖和什么都不做。所以我们有如下关系：

- 买：buy[i] = max( sell[i-1] - prices[i], buy[i-1]);
*( 前一天卖了后今天买了， 前一天的最大）*

- 卖：sell[i] = max( buy[i-1] + prices[i] - fee , sell[i-1]);
*（前一天买了今天卖了，前天最大）*

按照上面的思路我们便可以写出代码了。

- [思路来源1](http://blog.csdn.net/u014688145/article/details/78317400?locationNum=6&fps=1)
 
- [思路来源2](http://blog.csdn.net/weixin_38739799/article/details/78318411)